# -*- coding: utf-8 -*-
"""Copy of AML 2404 AI & ML Lab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BBPAK86vXYECwQrwpklXzwUrlOoN-Iwo

## Importing required libraries
"""

!pip3 install statsmodels
!pip3 install git+https://github.com/statsmodels/statsmodels.git

pip install statsmodels

!pip install pmdarima

import pandas as pd
import matplotlib.pyplot as mp
import seaborn as sb
import numpy as np
from google.colab import drive,files
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt


#38004110

"""## Loading the datasets into a Dataframe"""

drive.mount('/content/drive', force_remount = True)
dataFrame = pd.read_csv("/content/drive/My Drive/AML-2404/vaccination-coverage-map.csv")
dataFrame.head()

dataFrame2 = pd.read_csv("/content/drive/My Drive/AML-2404/vaccination-coverage-byVaccineType.csv")
dataFrame2.head()

dataFrame3 = pd.read_csv("/content/drive/My Drive/AML-2404/vaccination-coverage-byAgeAndSex.csv")
dataFrame3.head()

print(dataFrame.shape)
print(dataFrame2.shape)
print(dataFrame3.shape)

mergedf = pd.merge(dataFrame2, dataFrame3, on = ["week_end", "prename"], how = "outer")

mergedf.head()

mergedf.shape

df = dataFrame2[(dataFrame2["prename"] == "Canada") & (dataFrame2["week_end"]=="2020-12-19")]
df

df2 = dataFrame3[(dataFrame3["prename"] == "Canada") & (dataFrame3["week_end"]=="2020-12-19")]
df2.head()

mergedf = pd.merge(df, df2, on = ["week_end", "prename"], how = "outer")
mergedf.iloc[32:65]

mergedf.to_csv('merge.csv')
files.download('merge.csv')

mergedf2 = pd.merge(dataFrame2, dataFrame3, on = ["week_end", "prename"], how = "outer")

mergedf2.to_csv('merge2.csv')
files.download('merge2.csv')

"""## dataFrame EDA"""

dataFrame.shape

dataFrame.size

dataFrame.info()

dataFrame.describe()

print(dataFrame.isnull().sum())

print(dataFrame['prename'].unique())

print(dataFrame['prfname'].unique())

dataFrame.head()

dataFrame.tail()

dataFrame = dataFrame.drop(['numweekdelta_atleast1dose', 'numweekdelta_fully','propweekdelta_atleast1dose','propweekdelta_fully'], axis = 1)

dataFrame.head()

dataFrame.shape

print(dataFrame.isnull().sum())

dataFrame['numtotal_fully']=dataFrame['numtotal_fully'].fillna(0)
dataFrame['proptotal_fully']=dataFrame['proptotal_fully'].fillna(0)

dataFrame[dataFrame['numtotal_partially'].isna()]

dataFrame.tail()

for i in range(330,443,14):
  #print(dataFrame['numtotal_partially'].iloc[i:i+1])
  diff = dataFrame['numtotal_atleast1dose'].iloc[i:i+1]-dataFrame['numtotal_fully'].iloc[i:i+1]
  #print(diff)
  dataFrame['numtotal_partially'].iloc[i:i+1] = diff
  print(dataFrame['numtotal_partially'].iloc[i:i+1])

dataFrame.iloc[330:331]

dataFrame[dataFrame['proptotal_partially'].isna()]

for i in range(330,443,14):
  diff = dataFrame['proptotal_atleast1dose'].iloc[i:i+1]-dataFrame['proptotal_fully'].iloc[i:i+1]
  #print(diff)
  dataFrame['proptotal_partially'].iloc[i:i+1] = diff
  print(dataFrame['proptotal_partially'].iloc[i:i+1])

dataFrame.iloc[330:331]

dataFrame[dataFrame['numeligible_atleast1dose'].isna()]

dataFrame['numeligible_atleast1dose']=dataFrame['numeligible_atleast1dose'].fillna(0)
dataFrame['numeligible_fully']=dataFrame['numeligible_fully'].fillna(0)
dataFrame['propeligible_atleast1dose']=dataFrame['propeligible_atleast1dose'].fillna(0)
dataFrame['propeligible_fully']=dataFrame['propeligible_fully'].fillna(0)

dataFrame[dataFrame['numeligible_partially'].isna()]

dataFrame['numeligible_partially']=dataFrame['numeligible_partially'].fillna(0)
dataFrame['propeligible_partially']=dataFrame['propeligible_partially'].fillna(0)

for i in range(330,443,14):
  print(dataFrame['numeligible_partially'].iloc[i:i+1])

for i in range(330,443,14):
  diff = dataFrame['numeligible_atleast1dose'].iloc[i:i+1]-dataFrame['numeligible_fully'].iloc[i:i+1]
  #print(diff)
  dataFrame['numeligible_partially'].iloc[i:i+1] = diff
  print(dataFrame['numeligible_partially'].iloc[i:i+1])

for i in range(330,443,14):
  diff = dataFrame['propeligible_atleast1dose'].iloc[i:i+1]-dataFrame['propeligible_fully'].iloc[i:i+1]
  #print(diff)
  dataFrame['propeligible_partially'].iloc[i:i+1] = diff
  print(dataFrame['propeligible_partially'].iloc[i:i+1])

dataFrame.iloc[330:331]

print(dataFrame.isnull().sum())

"""## FBProphet"""

pip install prophet

from prophet import Prophet
import json
from prophet.serialize import model_to_json, model_from_json

dataFrame.info()

dataFrame['week_end'] = pd.to_datetime(dataFrame['week_end'])

dataFrame.info()

dataFrame_numtotal_partially1 = dataFrame[dataFrame['prename']=='Canada']
dataFrame_numtotal_partially1.head()

dataFrame_numtotal_partially = dataFrame_numtotal_partially1[['week_end', 'numeligible_partially']].copy()
dataFrame_numtotal_partially.head()

dataFrame_numtotal_partially.columns = ['ds', 'y']
dataFrame_numtotal_partially.head()

mask = (dataFrame_numtotal_partially['ds'] >= '2021-07-1') & (dataFrame_numtotal_partially['ds'] <= '2021-09-30')
dataFrame_numtotal_partially.loc[mask].head()

m = Prophet(weekly_seasonality=True)
m.fit(dataFrame_numtotal_partially.loc[mask])

future = m.make_future_dataframe(periods=30,freq='W')
future.head()

forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].where((forecast['ds']>='2021-08-1') & (forecast['ds']<='2021-08-30'))

mask = (dataFrame['week_end'] >= '2021-8-1') & (dataFrame['week_end'] <= '2021-8-30')
df_numtotal_partially = dataFrame[dataFrame['prename']=='Canada'].loc[mask].head()
df_numtotal_partially[['week_end','numtotal_partially']]

from prophet.diagnostics import cross_validation
df_cv = cross_validation(m, initial='10 days', period='30 days', horizon = '10 days')
df_cv.head()

from prophet.diagnostics import performance_metrics
df_p = performance_metrics(df_cv)
df_p.head()

fig2 = m.plot_components(forecast)

from prophet.plot import plot_plotly, plot_components_plotly

plot_plotly(m, forecast)

with open('prophetModel.json', 'w') as fout:
    json.dump(model_to_json(m), fout)  # Save model
files.download('prophetModel.json')

with open('prophetModel.json', 'r') as fin:
    m = model_from_json(json.load(fin))  # Load model

"""#  ARIMA model"""

dataFrame['week_end'] = pd.to_datetime(dataFrame['week_end'])
dataFrame2['week_end'] = pd.to_datetime(dataFrame2['week_end'])
dataFrame3['week_end'] = pd.to_datetime(dataFrame3['week_end'])

mask_train = (dataFrame['week_end'] >= '2020-12-19') & (dataFrame['week_end'] <= '2021-5-31')
mask_train2 = (dataFrame2['week_end'] >= '2020-12-19') & (dataFrame2['week_end'] <= '2021-7-30')
mask_train3 = (dataFrame3['week_end'] >= '2020-12-19') & (dataFrame3['week_end'] <= '2021-7-31')

df_numtotal_partially_train = dataFrame[dataFrame['prename']=='Canada' ].loc[mask_train][['week_end','numtotal_partially']]
df2_numtotal_atleast1dose_train = dataFrame2[(dataFrame2['prename']=='Canada') & (dataFrame2["product_name"] =="COVISHIELD")].loc[mask_train2][['week_end','numtotal_atleast1dose']]
df3_numtotal_fully_train = dataFrame3[(dataFrame3['prename']=='Canada') & (dataFrame3["age"] == '60-69') & (dataFrame3["sex"]=="f")].loc[mask_train3][['week_end','numtotal_fully']]
# df3_numtotal_fully_train = dataFrame2[dataFrame3['prename']=='Canada'].loc[mask_train2][['week_end','numtotal_fully']]

df_numtotal_partially_train.columns = ["ds","y"]
df2_numtotal_atleast1dose_train.columns = ["ds","y"]
df3_numtotal_fully_train.columns = ["ds","y"]
df2_numtotal_atleast1dose_train

mask_test = (dataFrame['week_end'] >= '2021-6-1') & (dataFrame['week_end'] <= '2021-8-30')
mask_test2 = (dataFrame2['week_end'] >= '2021-8-1') & (dataFrame2['week_end'] <= '2021-8-30')
mask_test3 = (dataFrame3['week_end'] >= '2021-8-1') & (dataFrame3['week_end'] <= '2021-8-30')

df_numtotal_partially_test = dataFrame[dataFrame['prename']=='Canada'].loc[mask_test][['week_end','numtotal_partially']]
df2_numtotal_atleast1dose_test = dataFrame2[(dataFrame3['prename']=='Canada') & (dataFrame2["product_name"] =="COVISHIELD")].loc[mask_test2][['week_end','numtotal_atleast1dose']]
df3_numtotal_fully_test = dataFrame3[(dataFrame3['prename']=='Canada') & (dataFrame3["age"] == '60-69') & (dataFrame3["sex"]=="f")].loc[mask_test3][['week_end','numtotal_fully']]
# df3_numtotal_fully_test = dataFrame3[dataFrame3['prename']=='Canada'].loc[mask_test3][['week_end','numtotal_partially']]

df_numtotal_partially_test.columns = ["ds","y"]
df2_numtotal_atleast1dose_test.columns = ["ds","y"]
df3_numtotal_fully_test.columns = ["ds","y"]
df2_numtotal_atleast1dose_test

cv=dataFrame2[(dataFrame2['prename']=='Canada') & (dataFrame2["product_name"] =="COVISHIELD")]['numtotal_atleast1dose']
# plt.plot(dataFrame2[(dataFrame2['prename']=='Canada') & (dataFrame2["product_name"] =="COVISHIELD")]['week_end'],cv.values)
from statsmodels.tsa.stattools import adfuller
from numpy import log
result = adfuller(cv.dropna())
print('ADF Statistic: %f' % result[0])
print('p-value: %f' % result[1])

cv=dataFrame3[(dataFrame3['prename']=='Canada') & (dataFrame3["age"] == '60-69') & (dataFrame3["sex"]=="f")]['numtotal_fully'].apply(lambda x:int(x))
# plt.plot(dataFrame2[(dataFrame2['prename']=='Canada') & (dataFrame2["product_name"] =="COVISHIELD")]['week_end'],cv.values)
from statsmodels.tsa.stattools import adfuller
from numpy import log
result = adfuller(cv.dropna())
print('ADF Statistic: %f' % result[0])
print('p-value: %f' % result[1])



from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
plt.rcParams.update({'figure.figsize':(9,3), 'figure.dpi':120})

fig, axes = plt.subplots(3, 2)
axes[0, 0].plot(cv); axes[0, 0].set_title('Original Series')
plot_pacf(cv.values,lags=13, ax=axes[0, 1])

axes[1, 0].plot(cv.diff()); axes[1, 0].set_title('Original Series')
plot_acf(cv.values, ax=axes[1, 1])

axes[2, 0].plot(cv.diff().diff()); axes[2, 0].set_title('Original Series')
plot_acf(cv.diff().diff().dropna().values, ax=axes[2, 1])

# r=2

plt.show()

fig, axes = plt.subplots(1, 2)
axes[0].plot(cv); axes[0].set_title('1st Differencing')
axes[1].set(ylim=(0,5))
plot_pacf(cv.dropna(), ax=axes[1])

plt.show()

cv.diff().values

cv.values

plt.plot(df2_numtotal_atleast1dose_test['ds'],df2_numtotal_atleast1dose_test['y'])
# dataFrame2[(dataFrame2['prename']=='Canada') & (dataFrame2["product_name"] =="COVISHIELD")]['week_end'],cv.values

plt.plot(df3_numtotal_fully_train['ds'],df3_numtotal_fully_train['y'])

df2_numtotal_atleast1dose_test['y']

from math import sqrt
from sklearn.metrics import mean_squared_error

X = df_numtotal_partially_train['y'].to_list()
size = int(len(X) * 0.66)
train = X
test = df_numtotal_partially_test['y'].to_list()
history = [x for x in train]
predictions = list()
# walk-forward validation
for t in range(len(test)):
	model = ARIMA(history, order=(2,0,2))
	model_fit = model.fit()
	output = model_fit.forecast()
	yhat = output[0]
	predictions.append(yhat)
	obs = test[t]
	history.append(obs)
	print('predicted=%f, expected=%f' % (yhat, obs))
# evaluate forecasts
rmse = sqrt(mean_squared_error(test, predictions))
print('Test RMSE: %.3f' % rmse)
# plot forecasts against actual outcomes
plt.plot(test)
plt.plot(predictions, color='red')
plt.show()
len(test)

df3_numtotal_fully_train

train = df3_numtotal_fully_train['y'].apply(lambda x:int(x))
test = df3_numtotal_fully_test['y'].apply(lambda x:int(x))
print(train)
model = ARIMA(train.values, order=(3, 1, 2))  
fitted = model.fit()  
print(fitted.summary())

conf = fitted.forecast(4, alpha=0.04)  # 95% conf

# Make as pandas series
fc_series = pd.Series(conf, index=test.index)
# lower_series = pd.Series(conf[:, 0], index=test.index)
# upper_series = pd.Series(conf[:, 1], index=test.index)

# Plot
plt.figure(figsize=(12,5), dpi=100)
plt.plot(train, label='training')
plt.plot(test, label='actual')
plt.plot(fc_series, label='forecast')
plt.title('Forecast vs Actuals')
plt.legend(loc='upper left', fontsize=8)
plt.show()

print(sqrt(mean_squared_error(test.to_list(), conf))
)

train = df2_numtotal_atleast1dose_train['y'].apply(lambda x:int(x))
test = df2_numtotal_atleast1dose_test['y'].apply(lambda x:int(x))
print(train)
model = ARIMA(train.values, order=(5, 0, 1))  
fitted = model.fit()  
print(fitted.summary())

conf = fitted.forecast(4, alpha=0.04)  # 95% conf

# Make as pandas series
fc_series = pd.Series(conf, index=test.index)
# lower_series = pd.Series(conf[:, 0], index=test.index)
# upper_series = pd.Series(conf[:, 1], index=test.index)

# Plot
plt.figure(figsize=(12,5), dpi=100)
plt.plot(train, label='training')
plt.plot(test, label='actual')
plt.plot(fc_series, label='forecast')
plt.title('Forecast vs Actuals')
plt.legend(loc='upper left', fontsize=8)
plt.show()

print(sqrt(mean_squared_error(test.to_list(), conf))
)

from pmdarima.arima import auto_arima
arima_model =  auto_arima(df_numtotal_partially_train["y"],start_p=0, d=1, start_q=0, 
                          max_p=5, max_d=5, max_q=5, start_P=0, 
                          D=1, start_Q=0, max_P=5, max_D=5,
                          max_Q=5, m=12, seasonal=True, 
                          error_action='warn',trace = True,
                          supress_warnings=True,stepwise = True,
                          random_state=20,n_fits = 50 )

# predicted = arima_model.predict()

predicted = arima_model.predict(n_periods=13)

len(df_numtotal_partially_test["y"])

fc_series = pd.Series(predicted, index=df_numtotal_partially_test["y"].index)
# lower_series = pd.Series(conf[:, 0], index=test.index)
# upper_series = pd.Series(conf[:, 1], index=test.index)

# Plot
plt.figure(figsize=(12,5), dpi=100)
plt.plot(df_numtotal_partially_train["y"], label='training')
plt.plot(df_numtotal_partially_test["y"], label='actual')
plt.plot(fc_series, label='forecast')
plt.title('Forecast vs Actuals')
plt.legend(loc='upper left', fontsize=8)
plt.show()

11154983.652233165
10639623.591357764


157978.98738432332

216980.69736620353
122284.42882951455
57826.00961882297
test.index

X = df3_numtotal_fully_train['y'].to_list()
size = int(len(X) * 0.66)
train = X
test = df3_numtotal_fully_test['y'].to_list()
history = [int(x) for x in train]
predictions = list()
# walk-forward validation
for t in range(len(test)):
	model = ARIMA(history, order=(4,1,2))
	model_fit = model.fit()
	output = model_fit.forecast()
	yhat = output[0]
	predictions.append(yhat)
	obs = int(test[t])
	history.append(obs)
	# print('predicted=%f, expected=%f' % (yhat, obs))
# evaluate forecasts
rmse = sqrt(mean_squared_error(test, predictions))
print('Test RMSE: %.3f' % rmse)
# plot forecasts against actual outcomes
plt.plot(test)
plt.plot(predictions, color='red')
plt.ylabel("Fully Vaccinated")
plt.show()
len(test)
df_3 = pd.DataFrame({"date":df3_numtotal_fully_test['ds'].to_list(),"test":test,"predicted":predictions})

# history.astype(np.float)
history

arima_df = pd.DataFrame({"date":df_numtotal_partially_test["ds"],"true_value":test,"predicted_value":predictions})

arima_df

from pandas.plotting import autocorrelation_plot

df_series = pd.Series(data=dataFrame_numtotal_partially['y'].to_list(), index=dataFrame_numtotal_partially['ds'].to_list(), name="sgv")

autocorrelation_plot(df_series)
pyplot.show()

#p value 2,3

from statsmodels.graphics.tsaplots import plot_pacf
plot_pacf(df_series,lags=15)

#q=2

# model = ARIMA(df_series,order=(2,1,2))
# model_fit = model.fit()
# print(model_fit.summary())

p=2
d=1
q=2
#p value 2,3
#q=2

from math import sqrt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error

X = df_numtotal_partially_train['y'].to_list()
size = int(len(X) * 0.66)
train, test = X[0:size], X[size:len(X)]
history = [x for x in train]
predictions = list()
# walk-forward validation
for t in range(len(test)):
	model = ARIMA(history, order=(p,d,q))
	model_fit = model.fit()
	output = model_fit.forecast()
	yhat = output[0]
	predictions.append(yhat)
	obs = test[t]
	history.append(obs)
	print('predicted=%f, expected=%f' % (yhat, obs))
# evaluate forecasts
rmse = sqrt(mean_squared_error(test, predictions))
print('Test RMSE: %.3f' % rmse)
# plot forecasts against actual outcomes
pyplot.plot(test)
pyplot.plot(predictions, color='red')
pyplot.show()



"""## Correlation heatmap dataFrame"""

mask = np.triu(np.ones_like(dataFrame.corr()))
fig, ax = mp.subplots(figsize=(20,10))
dataplot = sb.heatmap(dataFrame.corr(), cmap="YlGnBu", annot=True, mask=mask)
mp.show()

dataFrame.head()

"""## dataFrame2 EDA"""

dataFrame2.shape

dataFrame2.size

dataFrame2.info()

dataFrame2.describe()

print(dataFrame2.isnull().sum())

print(dataFrame2['prename'].unique())

print(dataFrame2['prfname'].unique())

print(dataFrame2['product_name'].unique())

print(dataFrame2['numtotal_partially'].unique())

dataFrame2 = dataFrame2.drop(['propweekdelta_fully', 'propweekdelta_partially','numweekdelta_fully','numweekdelta_atleast1dose','Unnamed: 11'], axis = 1)

print(dataFrame2.isnull().sum())

dataFrame2['numtotal_atleast1dose']=dataFrame2['numtotal_atleast1dose'].fillna(0)
dataFrame2['numtotal_partially']=dataFrame2['numtotal_partially'].fillna(0)
dataFrame2['numtotal_fully']=dataFrame2['numtotal_fully'].fillna(0)

for i in range(0,3421):
  diff = dataFrame2['numtotal_atleast1dose'].iloc[i:i+1]-dataFrame2['numtotal_fully'].iloc[i:i+1]
  #print(diff)
  dataFrame2['numtotal_partially'].iloc[i:i+1] = diff

dataFrame2.iloc[1613:1614]

dataFrame2['prop_atleast1dose']=dataFrame2['prop_atleast1dose'].fillna(0)
dataFrame2['prop_partially']=dataFrame2['prop_partially'].fillna(0)
dataFrame2['prop_fully']=dataFrame2['prop_fully'].fillna(0)

dataFrame2["prop_atleast1dose"].replace({"<0.01": "0.01"}, inplace=True)
dataFrame2["prop_fully"].replace({"<0.01": "0.01"}, inplace=True)
dataFrame2["prop_partially"].replace({"<0.01": "0.01"}, inplace=True)
dataFrame2["prop_partially"].replace({"na": "0"}, inplace=True)

dataFrame2["prop_partially"] = pd.to_numeric(dataFrame2["prop_partially"], downcast="float")
dataFrame2["prop_fully"] = pd.to_numeric(dataFrame2["prop_fully"], downcast="float")
dataFrame2["prop_atleast1dose"] = pd.to_numeric(dataFrame2["prop_atleast1dose"], downcast="float")
dataFrame2["numtotal_partially"] = pd.to_numeric(dataFrame2["numtotal_partially"], downcast="float")

dataFrame2.info()

dataFrame2['week_end'] = pd.to_datetime(dataFrame2['week_end'])

dataFrame2.info()

dataFrame2['week_end']

dataFrame_numtotal_atleast1dose = dataFrame2[(dataFrame2['prename']=='Canada') & (dataFrame2['product_name']=='COVISHIELD')]
dataFrame_numtotal_atleast1dose.head()

dataFrame_numtotal_atleast1dose = dataFrame_numtotal_atleast1dose[['week_end', 'numtotal_atleast1dose']].copy()
dataFrame_numtotal_atleast1dose.head()

dataFrame_numtotal_atleast1dose.columns = ['ds', 'y']
dataFrame_numtotal_atleast1dose.head()

mask = (dataFrame_numtotal_atleast1dose['ds'] >= '2021-07-01') & (dataFrame_numtotal_atleast1dose['ds'] <= '2021-09-30')
dataFrame_numtotal_atleast1dose.loc[mask].head()

m = Prophet(weekly_seasonality=True)
m.fit(dataFrame_numtotal_atleast1dose.loc[mask])

future = m.make_future_dataframe(periods=30,freq='W')
future.head()

forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].where((forecast['ds']>='2021-08-1') & (forecast['ds']<='2021-08-30'))

mask = (dataFrame2['week_end'] >= '2021-8-1') & (dataFrame2['week_end'] <= '2021-8-30')
df_numtotal_atleast1dose = dataFrame2[(dataFrame2['prename']=='Canada') & (dataFrame2['product_name']=='COVISHIELD')].loc[mask].head()

df_numtotal_atleast1dose[['week_end','numtotal_atleast1dose']]

df_cv = cross_validation(m, initial='10 days', period='30 days', horizon = '10 days')
df_cv.head()

df_p = performance_metrics(df_cv)
df_p.head()

plot_plotly(m, forecast)

"""## Correlation heatmap dataFrame2"""

mask = np.triu(np.ones_like(dataFrame2.corr()))
fig, ax = mp.subplots(figsize=(20,10))
dataplot = sb.heatmap(dataFrame2.corr(), cmap="YlGnBu", annot=True, mask=mask)
mp.show()

print(dataFrame2.isnull().sum())

"""## dataFrame3 EDA"""

dataFrame3.shape

dataFrame3.size

dataFrame3.info()

dataFrame3.describe()

print(dataFrame3.isnull().sum())

print(dataFrame3['prfname'].unique())

print(dataFrame3['prename'].unique())

print(dataFrame3['sex'].unique())

print(dataFrame3['age'].unique())

print(dataFrame3['numtotal_atleast1dose'].unique())

#dataFrame3 = dataFrame3.drop(['numweekdelta_atleast1dose', 'numweekdelta_fully','propweekdelta_partially','propweekdelta_fully','numtotal_partiallyrange','numtotal_fullyrange','prop_partiallyrange','prop_fullyrange'], axis = 1)

#dataFrame3["numtotal_atleast1dose"].replace({"na": "0"}, inplace=True)
#dataFrame3["numtotal_partially"].replace({"na": "0"}, inplace=True)
#dataFrame3["numtotal_fully"].replace({"na": "0"}, inplace=True)
#dataFrame3["prop_atleast1dose"].replace({"na": "0"}, inplace=True)
#dataFrame3["prop_partially"].replace({"na": "0"}, inplace=True)
#dataFrame3["prop_fully"].replace({"na": "0"}, inplace=True)

dataFrame3['numtotal_atleast1dose']=dataFrame3['numtotal_atleast1dose'].fillna(0)
dataFrame3["numtotal_partially"]=dataFrame3['numtotal_partially'].fillna(0)
dataFrame3["numtotal_fully"]=dataFrame3['numtotal_fully'].fillna(0)
dataFrame3["prop_atleast1dose"]=dataFrame3['prop_atleast1dose'].fillna(0)
dataFrame3["prop_partially"]=dataFrame3['prop_partially'].fillna(0)
dataFrame3["prop_fully"]=dataFrame3['prop_fully'].fillna(0)

#dataFrame3["prop_atleast1dose"].replace({"<0.01": "0.01"}, inplace=True)
#dataFrame3["prop_atleast1dose"].replace({"≥95": "95"}, inplace=True)
#dataFrame3["prop_partially"].replace({"<0.01": "0.01"}, inplace=True)
#dataFrame3["prop_partially"].replace({"≥95": "95"}, inplace=True)
#dataFrame3["prop_fully"].replace({"<0.01": "0.01"}, inplace=True)
#dataFrame3["prop_fully"].replace({"≥95": "95"}, inplace=True)

dataFrame3["numtotal_atleast1dose"] = pd.to_numeric(dataFrame3["numtotal_atleast1dose"], downcast="float")
dataFrame3["numtotal_partially"] = pd.to_numeric(dataFrame3["numtotal_partially"], downcast="float")
dataFrame3["numtotal_fully"] = pd.to_numeric(dataFrame3["numtotal_fully"], downcast="float")
dataFrame3["prop_atleast1dose"] = pd.to_numeric(dataFrame3["prop_atleast1dose"], downcast="float")
dataFrame3["prop_partially"] = pd.to_numeric(dataFrame3["prop_partially"], downcast="float")
dataFrame3["prop_fully"] = pd.to_numeric(dataFrame3["prop_fully"], downcast="float")

dataFrame3['week_end'] = pd.to_datetime(dataFrame3['week_end'])

dataFrame_numtotal_fully = dataFrame3[(dataFrame3['prename']=='Canada') & (dataFrame3['sex']=='f') & (dataFrame3['age']=='70-79')]

dataFrame_numtotal_fully.head()

dataFrame_numtotal_fully = dataFrame_numtotal_fully[['week_end', 'numtotal_fully']].copy()
dataFrame_numtotal_fully.head()

dataFrame_numtotal_fully.columns = ['ds', 'y']
dataFrame_numtotal_fully.head()

mask = (dataFrame_numtotal_fully['ds'] >= '2021-07-1') & (dataFrame_numtotal_fully['ds'] <= '2021-09-30')
dataFrame_numtotal_fully.loc[mask].head()

m = Prophet(weekly_seasonality=True)
m.fit(dataFrame_numtotal_fully.loc[mask])

future = m.make_future_dataframe(periods=60,freq='W')
future.head()

forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]

mask = (dataFrame3['week_end'] >= '2021-08-1') & (dataFrame3['week_end'] <= '2021-08-30')
df_numtotal_fully = dataFrame3[(dataFrame3['prename']=='Canada') & (dataFrame3['sex']=='f') & (dataFrame3['age']=='70-79')].loc[mask].head()

df_numtotal_fully[['week_end','numtotal_fully']]

df_cv = cross_validation(m, initial='10 days', period='30 days', horizon = '10 days')
df_cv.head()

df_p = performance_metrics(df_cv)
df_p.head()

plot_plotly(m, forecast)

"""## Correlation heatmap dataFrame3"""

mask = np.triu(np.ones_like(dataFrame3.corr()))
fig, ax = mp.subplots(figsize=(20,10))
dataplot = sb.heatmap(dataFrame3.corr(), cmap="YlGnBu", annot=True, mask=mask)
mp.show()

dataFrame3.info()



"""## Visualization """

import plotly.express as px
import plotly.graph_objects as go
# type(dataFrame["week_end"][0])
df = dataFrame.groupby("week_end")
xy_1dose = df.apply(lambda x:x["numtotal_atleast1dose"].sum())
xy_partial_dose = df.apply(lambda x:x["numtotal_partially"].sum())
xy_full_dose = df.apply(lambda x:x["numtotal_fully"].sum())

fig = go.Figure()
fig = px.line(xy_1dose, x=xy_1dose.index, y=xy_1dose.values, title='Vaccination Dose')
fig.add_scatter(x=xy_1dose.index, y=xy_1dose.values,mode='lines',name= "Atleast 1 Dose only")
fig.add_scatter(x=xy_partial_dose.index, y=xy_partial_dose.values,mode="lines",name='Partially Vaccinated')
fig.add_scatter( x=xy_full_dose.index, y=xy_full_dose.values,mode='lines',name="Fully Vaccinated")

# fig.add_line(x=xy_1dose.index, y=xy_1dose.values)
# px.line(xy_1dose, x=xy_1dose.index, y=xy_1dose.values, title='Vaccination Dose')
# px.line(xy_partial_dose, x=xy_partial_dose.index, y=xy_partial_dose.values, title='Vaccination Does')
# px.line(xy_full_dose, x=xy_full_dose.index, y=xy_full_dose.values, title='Vaccination Does')

fig.show()

vaccine_type = dataFrame2["product_name"].value_counts()
color_code =["#CCCCFF","#DE3163","#FF7F50","#6495ED","#40E0D0","#FFBF00","#DFFF00","#808080","#DFDF00"]

fig = px.pie(dataFrame2,values=vaccine_type.values,names = vaccine_type.index,hole=0.4,color = color_code)
fig.show()

import datetime

dataFrame3.month  = dataFrame3.week_end.apply(lambda x:x.month)
x = dataFrame3.groupby(by=[dataFrame3.month,dataFrame3.age])

x.ngroups

dataFrame_coverage = pd.read_csv("/content/drive/My Drive/AML-2404/vaccination-coverage-map.csv")
dataFrame_coverage.head()

dataFrame_coverage.fillna(0,inplace=True)

dataFrame_for_bubble=dataFrame_coverage[dataFrame_coverage.prename != 'Canada']
dataFrame_for_bubble.rename(columns={"prename": "province"}, inplace=True)

import plotly.express as px

fig_partially_vaccinated = px.scatter(dataFrame_for_bubble, x="week_end", y="numtotal_atleast1dose",size="proptotal_partially",hover_name="province",color="province", title= "Number of Vaccines Administrated and Proportion of Partially Vaccinated in various Provinces")
fig_partially_vaccinated.show()

import plotly.express as px

fig_fully_vaccinated = px.scatter(dataFrame_for_bubble, x="week_end", y="numtotal_atleast1dose",size="proptotal_fully",hover_name="province",color="province", title= "Number of Vaccines Administrated and Proportion of Fully Vaccinated in various Provinces")
fig_fully_vaccinated.show()

"""Dataset 2"""

dataFrame_vaccinetype = pd.read_csv("/content/drive/My Drive/AML-2404/vaccination-coverage-byVaccineType.csv")
dataFrame_vaccinetype.fillna(0,inplace=True)

prename_list=dataFrame_vaccinetype['prename'].unique()
prename_list

for i in range(0,len(prename_list)):
  fig_title="Distribution of Various Vaccines in "+prename_list[i]
  fig_d2 = px.scatter(dataFrame_vaccinetype[dataFrame_vaccinetype.prename == prename_list[i]], x="week_end", y="product_name",size="numtotal_atleast1dose",hover_name="prename",color="prename",width=800, height=400, title=fig_title)
  fig_d2.show()

dataFrame_vclean=dataFrame_vaccinetype[(dataFrame_vaccinetype.prename == 'Canada')]
dataFrame_vclean.drop(columns=['pruid','prfname','numtotal_partially','numtotal_fully','prop_atleast1dose','prop_partially','prop_fully','Unnamed: 11','numweekdelta_atleast1dose','numweekdelta_fully','propweekdelta_partially','propweekdelta_fully'], inplace=True)
dataFrame_vclean

from datetime import datetime
a = datetime.fromisoformat(dataFrame_vclean['week_end'].min()).timestamp()
b = datetime.fromisoformat(dataFrame_vclean['week_end'].max()).timestamp()
mid_time=a + (b - a)/2

dataFrame_Cloud1=pd.DataFrame()
dataFrame_Cloud2=pd.DataFrame()

for i in range(0,dataFrame_vclean.shape[0]):
  if datetime.fromisoformat(dataFrame_vclean.iloc[i][1]).timestamp()<mid_time:
    dataFrame_Cloud1=dataFrame_Cloud1.append(dataFrame_vclean.iloc[i,:])
    
  else:
    dataFrame_Cloud2=dataFrame_Cloud2.append(dataFrame_vclean.iloc[i,:])

dataFrame_Cloud1.shape

dataFrame_Cloud1.drop(columns=['prename','week_end'], inplace=True)
dataFrame_Cloud2.drop(columns=['prename','week_end'], inplace=True)

data_cloud1 = [['AstraZeneca',0], ['COVISHIELD',0], ['Combination',0],['Janssen',0],['Moderna',0],['Not reported',0],['Other',0],['Pfizer-BioNTech',0],['Unknown',0]]
data_cloud2 = [['AstraZeneca',0], ['COVISHIELD',0], ['Combination',0],['Janssen',0],['Moderna',0],['Not reported',0],['Other',0],['Pfizer-BioNTech',0],['Unknown',0]]

print(type(data_cloud2))
print((data_cloud1[1][1]))
for i in range(0,len(data_cloud1)):
  #print(data_cloud1[i][0])
  data_cloud1[i][1]=dataFrame_Cloud1[(dataFrame_Cloud1.product_name == data_cloud1[i][0])].sum().iloc[0]
  if data_cloud1[i][0]=="Not reported":
    data_cloud1[i][0]="NotReported"
  elif data_cloud1[i][0]=="Pfizer-BioNTech":
    data_cloud1[i][0]="Pfizer"
#print((data_cloud1))

print((data_cloud1[1][1]))

for i in range(0,len(data_cloud1)):
  #print(data_cloud1[i][0])
  data_cloud2[i][1]=dataFrame_Cloud2[(dataFrame_Cloud2.product_name == data_cloud2[i][0])].sum().iloc[0]
  if data_cloud2[i][0]=="Not reported":
    data_cloud2[i][0]="NotReported"
  elif data_cloud2[i][0]=="Pfizer-BioNTech":
    data_cloud2[i][0]="Pfizer"

#print((data_cloud2))
# Create the pandas DataFrame
dataFrame_for_cloud1 = pd.DataFrame(data_cloud1, columns = ['Vaccine Type', 'Numbers'])
dataFrame_for_cloud2 = pd.DataFrame(data_cloud2, columns = ['Vaccine Type', 'Numbers'])
dataFrame_for_cloud2

cloud2_max=dataFrame_for_cloud2.max().iloc[1]
cloud1_max=dataFrame_for_cloud1.max().iloc[1]

for i in range(0,len(data_cloud1)):
  data_cloud1[i][1]=int((data_cloud1[i][1]/cloud1_max)*1000)

for i in range(0,len(data_cloud1)):
  data_cloud2[i][1]=int((data_cloud2[i][1]/cloud2_max)*1000)

#data_cloud2
#data_cloud1

# Commented out IPython magic to ensure Python compatibility.
#Importing Libraries

import pandas as pd

import matplotlib.pyplot as plt

# %matplotlib inline

from wordcloud import WordCloud

#Importing Dataset

#dataFrame_Cloud1 = pd.read_csv("1.csv")

#Checking the Data

#dataFrame_Cloud1.head()
text1=""
#Creating the text variable
for i in range(0,len(data_cloud1)):
  temp_text=(data_cloud1[i][0]+" ")*data_cloud1[i][1]
  #print(temp_text)
  text1=text1+(temp_text)
#text2 = " ".join(title for title in dataFrame_Cloud1.title)

# Creating word_cloud with text as argument in .generate() method
#print(text2)
word_cloud1 = WordCloud(collocations = False, background_color = 'black').generate(text1)

# Display the generated Word Cloud
plt.title("Most Taken Vaccines in the First Half", fontdict=None, loc='Left', pad=None)
plt.imshow(word_cloud1, interpolation='bilinear')

plt.axis("off")

plt.show()

text2=""
#Creating the text variable
for i in range(0,len(data_cloud2)):
  temp_text=(data_cloud2[i][0]+" ")*data_cloud2[i][1]
  #print(temp_text)
  text2=text2+(temp_text)
#text2 = " ".join(title for title in dataFrame_Cloud1.title)

# Creating word_cloud with text as argument in .generate() method
#print(text2)
word_cloud2 = WordCloud(collocations = False, background_color = 'black').generate(text2)

# Display the generated Word Cloud
plt.title("Most Taken Vaccines in the Second Half", fontdict=None, loc='Left', pad=None)
plt.imshow(word_cloud2, interpolation='bilinear')

plt.axis("off")

plt.show()

dataFrame_coverage = pd.read_csv("/content/drive/My Drive/AML-2404/vaccination-coverage-byAgeAndSex.csv")

dataFrame_barChart=dataFrame_coverage[(dataFrame_coverage.prename == 'Canada')&(dataFrame_coverage.week_end == (dataFrame_coverage['week_end'].max()))]

dataFrame_barChart=dataFrame_barChart[(dataFrame_barChart.age == '0-11')|(dataFrame_barChart.age == '12-17')|(dataFrame_barChart.age == '18-29')|(dataFrame_barChart.age == '30-39')|(dataFrame_barChart.age == '40-49')|(dataFrame_barChart.age == '50-59')|(dataFrame_barChart.age == '60-69')|(dataFrame_barChart.age == '70-79')|(dataFrame_barChart.age == '80+')|(dataFrame_barChart.age == 'Unknown')|(dataFrame_barChart.age == 'Not reported')]

dataFrame_barChart.shape

dataFrame_barChart.drop(columns=['pruid', 'prfname', 'numtotal_partially','numtotal_fully','prop_atleast1dose','prop_partially','prop_fully','numweekdelta_atleast1dose','numweekdelta_fully','propweekdelta_partially','propweekdelta_fully','numtotal_partiallyrange','numtotal_fullyrange','prop_partiallyrange','prop_fullyrange'], inplace=True)

dataFrame_barChart

dataFrame_barChart_temp=dataFrame_barChart[dataFrame_barChart.sex == 'm']
dataFrame_barChart_temp

import plotly.graph_objects as go

age_group = dataFrame_barChart[dataFrame_barChart.sex == 'm']['age'].tolist()

import plotly.graph_objects as go

fig = go.Figure()
fig.add_trace(go.Bar(
    x=age_group,
    y=dataFrame_barChart[dataFrame_barChart.sex == 'f']['numtotal_atleast1dose'].tolist(),
    name='Female',
    marker_color='indianred'
))
fig.add_trace(go.Bar(
    x=age_group,
    y=dataFrame_barChart[dataFrame_barChart.sex == 'm']['numtotal_atleast1dose'].tolist(),
    name='Male',
    marker_color='orangered'
))
fig.add_trace(go.Bar(
    x=age_group,
    y=dataFrame_barChart[dataFrame_barChart.sex == 'Others']['numtotal_atleast1dose'].tolist(),
    name='Other',
    marker_color='lightsalmon'
))
fig.add_trace(go.Bar(
    x=age_group,
    y=dataFrame_barChart[dataFrame_barChart.sex == 'Unknown']['numtotal_atleast1dose'].tolist(),
    name='Unknown',
    marker_color='darkred'
))
fig.add_trace(go.Bar(
    x=age_group,
    y=dataFrame_barChart[dataFrame_barChart.sex == 'Not reported']['numtotal_atleast1dose'].tolist(),
    name='Not reported',
    marker_color='lightcoral'
))


fig.update_layout(title='Vaccination w.r.t Age & Gender',yaxis=dict(
        title='Number of people taken atleast one dose',
        titlefont_size=16,
        tickfont_size=14,
    ),xaxis=dict(
        title='Age Group',
        titlefont_size=16,
        tickfont_size=14,
    ),barmode='group', xaxis_tickangle=-45)
fig.show()

import folium

url = 'https://raw.githubusercontent.com/python-visualization/folium/master/examples/data'
country_shapes = f'{url}/world-countries.json'
m = folium.Map()

folium.Choropleth(
    #The GeoJSON data to represent the world country
    geo_data=country_shapes,
    name='choropleth COVID-19',
    data=dataFrame,
    #The column aceppting list with 2 value; The country name and  the numerical value
    columns=['prfname', 'numtotal_atleast1dose'],
    key_on='feature.properties.name',
    fill_color='PuRd',
    nan_fill_color='white'
).add_to(m)
m

from folium.plugins import TimeSliderChoropleth
from branca.element import Figure

fig6=Figure(height=850,width=1000)
m6 = folium.Map([61.0062,-107.991], tiles='cartodbpositron', zoom_start=5)
fig6.add_child(m6)

pip install geopandas

import geopandas

india_geojson=geopandas.read_file('/content/drive/My Drive/AML-2404/georef-canada-province.geojson')
india_geojson.head()


df_covid = dataFrame
df_covid['week_end']=(df_covid['week_end'].astype(int)// 10**9).astype('U10')
covid_dict={}
for i in df_covid['prename'].unique():
    covid_dict[i]={}
    for j in df_covid[df_covid['prename']==i].set_index(['prename']).values:   
        covid_dict[i][j[0]]={'color':j[1],'opacity':0.7}

g = TimeSliderChoropleth(
    india_geojson.set_index('prov_name_fr').to_json(),
    styledict=covid_dict
).add_to(m6)
m6